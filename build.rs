use convert_case::{Case, Casing};
use std::fs::File;
use std::io::prelude::*;
use xml::{reader::XmlEvent, EventReader};

const EBML_XML: &str = include_str!("ebml.xml");
const EBML_MATROSKA_XML: &str = include_str!("ebml_matroska.xml");

fn variant_to_enum_literal(variant: &str) -> &str {
    match variant {
        "master" => "Master",
        "uinteger" => "Unsigned",
        "integer" => "Signed",
        "string" => "String",
        "binary" => "Binary",
        "utf-8" => "Utf8",
        "date" => "Date",
        "float" => "Float",
        _ => panic!("Variant not expected: {}", variant),
    }
}

fn write_ebml_elements(file: &mut File) -> std::io::Result<()> {
    let mut event_reader = EventReader::from_str(EBML_XML);
    while let Ok(event) = event_reader.next() {
        if event == XmlEvent::EndDocument {
            break;
        }

        if let XmlEvent::StartElement {
            name: tag_name,
            attributes,
            namespace: _,
        } = event
        {
            if tag_name.local_name == "element" {
                for attr in attributes {
                    match attr.name.local_name.as_str() {
                        "name" => {
                            write!(file, "    name = {}, ", attr.value.to_case(Case::Pascal))?
                        }
                        "id" => write!(file, "id = {}, ", attr.value)?,
                        "type" => {
                            writeln!(file, "variant =  {};", variant_to_enum_literal(&attr.value))?
                        }
                        _ => (),
                    }
                }
            }
        }
    }
    Ok(())
}

fn write_matroska_elements(file: &mut File) -> std::io::Result<()> {
    let mut event_reader = EventReader::from_str(EBML_MATROSKA_XML);
    'outer: while let Ok(event) = event_reader.next() {
        if event == XmlEvent::EndDocument {
            break;
        }

        if let XmlEvent::StartElement {
            name: tag_name,
            attributes,
            namespace: _,
        } = event
        {
            if tag_name.local_name == "element" {
                for attr in attributes {
                    match attr.name.local_name.as_str() {
                        "name" => {
                            // Ignore restrictions with duplications
                            match attr.value.as_str() {
                                "EBMLMaxIDLength" | "EBMLMaxSizeLength" => continue 'outer,
                                _ => write!(
                                    file,
                                    "    name = {}, ",
                                    attr.value.to_case(Case::Pascal)
                                )?,
                            }
                        }
                        "id" => write!(file, "id = {}, ", attr.value)?,
                        "type" => {
                            writeln!(file, "variant =  {};", variant_to_enum_literal(&attr.value))?
                        }
                        _ => (),
                    }
                }
            }
        }
    }
    Ok(())
}

fn main() -> std::io::Result<()> {
    println!("cargo:rerun-if-changed=ebml.xml");
    println!("cargo:rerun-if-changed=ebml_matroska.xml");

    let mut file = File::create("src/elements.rs")?;

    writeln!(
        file,
        "// DO NOT EDIT! This file is auto-generated by build.rs."
    )?;
    writeln!(file, "// Instead, update ebml.xml and ebml_matroska.xml")?;
    writeln!(file, "ebml_elements! {{")?;
    write_ebml_elements(&mut file)?;
    write_matroska_elements(&mut file)?;
    writeln!(file, "}}")?;
    Ok(())
}
